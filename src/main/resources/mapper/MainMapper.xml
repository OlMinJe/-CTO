<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.MainMapper">

	<select id="now" resultType="string">
		SELECT NOW() FROM DUAL;
	</select>	
		
	<!-- <select id="memberLogin" resultType="MemberVO">
		SELECT memberId, memberPass
		FROM tb_member
		WHERE memberId = #{memberId}
		AND memberPass = #{memberPass}
	</select> -->


	<!-- 관리자페이지 리스트보기-->
	<select id="dispAdmin" resultType="MemberVO">
		SELECT *
		FROM tb_member
	</select>

	<!-- 회원 드롭-->
	<update id="dropUser">
		delete from tb_member
		where mb_id= #{mb_id}
	</update>

	<delete id="memberOut" parameterType="MemberVO">
		delete from tb_member
		where mb_id= #{mb_id}
	</delete>

	<!-- 아이디 찾기 -->
	<select id="find_id" parameterType="String" resultType="String">
		select mb_id from tb_member where mb_email = #{mb_email}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="update_pw" parameterType="memberVO">
		update tb_member set mb_pw = #{mb_pw} where mb_id = #{mb_id}
	</update>

	<select id="userCheck" resultType="MemberVO">
		SELECT mb_id, mb_pw
		FROM tb_member
		WHERE mb_id = #{mb_id}
	</select>
	
	<select id="idCheck" parameterType="String" resultType="Integer">
		SELECT count(*)
		FROM tb_member
		WHERE mb_id = #{mb_id}
	</select>

	<insert id="memberRegister">
		INSERT into tb_member(mb_name, mb_id, mb_pw, mb_nick, mb_email, mb_addr, mb_sex, mb_doctor, mb_img)
		VALUES (#{mb_name}, #{mb_id}, #{mb_pw}, #{mb_nick}, #{mb_email}, #{mb_addr}, #{mb_sex}, #{mb_doctor}, #{mb_img})
	</insert>

	<select id="memberModifyGET" resultType="MemberVO" parameterType="String">
		SELECT *
		FROM tb_member
		WHERE mb_id = #{mb_id}
	</select>
	
	<update id="memberModifyPOST" parameterType="MemberVO">
		UPDATE tb_member
		SET mb_pw = #{mb_pw}
		WHERE mb_id = #{mb_id}
	</update>
	
	<delete id="memberDelete" parameterType="MemberVO">
		DELETE from tb_member
		WHERE mb_id = #{mb_id}
	</delete>

	<update id="nickModifyPOST" parameterType="MemberVO">
		update tb_member
		set mb_nick=#{mb_nick}
		where mb_id = #{mb_id}
	</update>

	<select id="nickCheck" parameterType="String" resultType="Integer">
		SELECT count(*)
		FROM tb_member
		WHERE mb_nick = #{mb_nick}
	</select>

	<update id="profileModifyPOST" parameterType="MemberVO">
		update tb_member
		set mb_img=#{mb_img}
		where mb_id=#{mb_id}
	</update>

	<insert id="boardWrite">
		INSERT INTO tb_com_talk (com_title, com_content, mb_seq,com_category,com_hit,mb_doctor,mb_nick,com_photo)
		VALUES (#{com_title}, #{com_content}, #{mb_seq}, #{com_category}, #{com_hit}, #{mb_doctor},#{mb_nick},#{com_photo} )
	</insert>

	<select id="boardList2" resultType="BoardVO">
		select *
        from tb_com_talk
		order by com_num desc limit 10
	</select>
<!--
	<select id="boardList" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
			SELECT *
			FROM tb_com_talk
			ORDER BY com_num DESC
			LIMIT #{pageStart}, #{perPageNum}
		]]>
	</select>

	<select id="boardListDetail" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
		SELECT *
		FROM tb_com_talk
		where com_category = #{category}
		ORDER BY com_num DESC
			LIMIT #{cri.pageStart}, #{cri.perPageNum}
		]]>
	</select>
-->
	<!--
	<select id="boardList" resultType="hashmap" parameterType="hashmap">
		<choose>
			<when test="sort == 'replyCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					order by com_comment desc
					LIMIT #{pageStart}, #{perPageNum}
				]]>
			</when>
			<when test="sort == 'viewCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					order by com_hit desc
					LIMIT #{pageStart}, #{perPageNum}
				]]>
			</when>
			<otherwise>
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					order by com_num desc
					LIMIT #{pageStart}, #{perPageNum}
				]]>
			</otherwise>
		</choose>
	</select>
	<select id="boardListDetail" resultType="hashmap" parameterType="hashmap">
		<choose>
			<when test="cri.sort == 'replyCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_category = #{category}
					order by com_comment desc
					LIMIT #{cri.pageStart}, #{cri.perPageNum}
				]]>
			</when>
			<when test="cri.sort == 'viewCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_category = #{category}
					order by com_hit desc
					LIMIT #{cri.pageStart}, #{cri.perPageNum}
				]]>
			</when>
			<otherwise>
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_category = #{category}
					order by com_num desc
					LIMIT #{cri.pageStart}, #{cri.perPageNum}
				]]>
			</otherwise>
		</choose>
	</select>
	<select id="boardListCnt" resultType="int">
		SELECT count(*)
		FROM tb_com_talk
	</select>

	<select id="boardListCntDetail" resultType="int">
		SELECT count(*)
		FROM tb_com_talk
		where com_category = #{category}
	</select>-->
	<select id="boardList" resultType="hashmap" parameterType="hashmap">
		<choose>
			<when test="sort == 'replyCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_num > 0
					]]>
				<include refid="criteria"></include>
				<![CDATA[
					order by com_comment desc
					LIMIT #{pageStart}, #{perPageNum}
				]]>
			</when>
			<when test="sort == 'viewCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_num > 0
					]]>
				<include refid="criteria"></include>
				<![CDATA[
					order by com_hit desc
					LIMIT #{pageStart}, #{perPageNum}
				]]>
			</when>
			<otherwise>
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_num > 0
					]]>
				<include refid="criteria"></include>
				<![CDATA[
					order by com_num desc
					LIMIT #{pageStart}, #{perPageNum}
				]]>
			</otherwise>
		</choose>
	</select>
	<sql id="criteria">
		<if test="type != null">
			<if test="type == 'T'.toString()">
				and com_title like concat('%', #{keyword}, '%')
			</if>
			<if test="type == 'C'.toString()">
				and com_content like concat('%', #{keyword}, '%')
			</if>
			<if test="type == 'W'.toString()">
				and mb_nick like concat('%', #{keyword}, '%')
			</if>
		</if>
	</sql>

	<sql id="criteria2">
		<if test="cri.type != null">
			<if test="cri.type == 'T'.toString()">
				and com_title like concat('%', #{cri.keyword}, '%')
			</if>
			<if test="cri.type == 'C'.toString()">
				and com_content like concat('%', #{cri.keyword}, '%')
			</if>
			<if test="cri.type == 'W'.toString()">
				and mb_nick like concat('%', #{cri.keyword}, '%')
			</if>
		</if>
	</sql>

	<select id="boardListDetail" resultType="hashmap" parameterType="hashmap">
		<choose>
			<when test="cri.sort == 'replyCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_category = #{category}
					and com_num>0
				]]>
				<include refid="criteria2"></include>
				<![CDATA[
					order by com_comment desc
					LIMIT #{cri.pageStart}, #{cri.perPageNum}
				]]>
			</when>
			<when test="cri.sort == 'viewCount'">
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_category = #{category}
					and com_num>0
				]]>
				<include refid="criteria2"></include>
				<![CDATA[
					order by com_hit desc
					LIMIT #{cri.pageStart}, #{cri.perPageNum}
				]]>
			</when>
			<otherwise>
				<![CDATA[
		        	SELECT *
					FROM tb_com_talk
					where com_category = #{category}
					and com_num>0
				]]>
				<include refid="criteria2"></include>
				<![CDATA[
					order by com_num desc
					LIMIT #{cri.pageStart}, #{cri.perPageNum}
				]]>
			</otherwise>
		</choose>
	</select>

	<select id="boardListCnt" resultType="int">
		select count(*) from tb_com_talk
		where com_num > 0
		<include refid="criteria"></include>
	</select>

	<select id="boardListCntDetail" resultType="int">
		SELECT count(*)
		FROM tb_com_talk
		where com_category = #{category} and com_num > 0
		<include refid="criteria2"></include>
	</select>

	<select id="boardRead" resultType="BoardVO">
		SELECT com_num, com_title, com_category,com_content, mb_nick,com_hit,com_photo,mb_seq,mb_doctor,com_like,com_date,com_comment
		FROM tb_com_talk
		WHERE com_num = #{com_num}
	</select>

	<update id="increaseComhit">
		update tb_com_talk set com_hit = com_hit+1
		where com_num=#{com_num}
	</update>

	<update id="boardModify" parameterType="com.project.vo.BoardVO">
		UPDATE tb_com_talk b, tb_member m
		SET b.com_title = #{com_title},
			b.com_content = #{com_content},
			b.com_date = now(),
			b.com_photo = #{com_photo}
		WHERE com_num = #{com_num}
		and b.mb_nick in (
			select mb_nick from tb_member
			where mb_nick = #{mb_nick}
		)		
	</update>
	
	<delete id="boardDelete" parameterType="int">
		DELETE FROM tb_com_talk
		WHERE com_num = #{com_num}
	</delete>

	<!-- 댓글부분 -->
	<select id="commentList" parameterType="int" resultType="CommentVO">
		SELECT *
		FROM tb_comment
		where com_num=#{com_num}
		order by comment_group,comment_date
	</select>

	<insert id="commentInsert" parameterType="CommentVO">
		INSERT INTO tb_comment(com_num,comment_content,mb_nick,mb_seq,mb_doctor,comment_depth,comment_group)
		VALUES(#{com_num},#{comment_content},#{mb_nick},#{mb_seq},#{mb_doctor},#{comment_depth},#{comment_group})
	</insert>

	<!-- 제일 최근 comment_seq 가져오기-->
	<select id="last" resultType="int">
		select last_insert_id();
	</select>

	<!-- comment_seq를 group값으로 넣기(모댓글인 경우에만 사용)-->
	<update id="updateGroup" parameterType="int">
		update tb_comment
		set comment_group=#{comment_seq}
		where comment_seq=#{comment_seq}
	</update>

	<update id="commentUpdate" parameterType="CommentVO">
		UPDATE tb_comment
		SET comment_content=#{comment_content},
			comment_date=now()
		WHERE comment_seq=#{comment_seq}
	</update>

	<delete id="commentDelete" parameterType="int">
		DELETE
		FROM tb_comment
		WHERE comment_seq=#{comment_seq}
	</delete>

	<!-- 대댓글 출력을 위한 댓글 카운트-->
	<select id="recommentList" parameterType="int" resultType="CommentVO">
		select * from tb_comment where comment_group=#{comment_group} and comment_depth=1 order by comment_date
	</select>

	<!-- 게시글별 댓글 카운트 관련-->
	<update id="updateReplyCount" parameterType="int">
		update tb_com_talk b
		set b.com_comment = (select count(comment_seq) from tb_comment where com_num = #{com_num})
		where b.com_num = #{com_num}
	</update>

	<!-- 좋아요 기능-->
	<select id="likecount" resultType="Integer" parameterType="LikeVO">
		select count(like_check) from tb_like where mb_nick=#{mb_nick} and com_num=#{com_num}
	</select>

	<insert id="likeinsert" parameterType="LikeVO">
		insert into tb_like(mb_nick,com_num)
		values (#{mb_nick},#{com_num})
	</insert>

	<select id="likegetinfo" resultType="Integer" parameterType="LikeVO">
		select like_check from tb_like where mb_nick=#{mb_nick} and com_num=#{com_num}
	</select>

	<update id="likeupdate" parameterType="LikeVO">
		update tb_like
		set <include refid="cal"></include>
		where mb_nick=#{mb_nick} and com_num=#{com_num}
	</update>

	<sql id="cal">
		<if test="count == 1">
			like_check = 0
		</if>

		<if test="count == 0">
			like_check = like_check + 1
		</if>
	</sql>

	<!-- 카운트한 값을 커뮤니티 DB의 com_like에 넣기-->
	<update id="updatecomlike" parameterType="int">
		update tb_com_talk b
		set b.com_like = (select count(com_num) from tb_like where com_num = #{com_num} and like_check=1)
		where b.com_num = #{com_num}
	</update>

	<!--상담 글작성-->
	<insert id="talkWrite">
		INSERT INTO tb_talk (talk_title, talk_content, mb_seq,talk_category,talk_hit,mb_doctor,mb_nick,talk_photo)
		VALUES (#{talk_title}, #{talk_content}, #{mb_seq}, #{talk_category}, #{talk_hit}, #{mb_doctor},#{mb_nick},#{talk_photo} )
	</insert>

	<!-- 상담 리스트-->
	<select id="talkList" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
		SELECT *
		FROM tb_talk
		where talk_category = #{category}
		ORDER BY talk_num DESC
			LIMIT #{cri.pageStart}, #{cri.perPageNum}
		]]>
	</select>

	<select id="talkListCnt" resultType="int">
		SELECT count(*)
		FROM tb_talk
		where talk_category = #{category}
	</select>

	<select id="talkRead" resultType="TalkVO">
		SELECT talk_num, talk_title, talk_category,talk_content, mb_nick,talk_hit,talk_photo,mb_seq,mb_doctor,talk_like,talk_date,talk_comment
		FROM tb_talk
		WHERE talk_num = #{talk_num}
	</select>

	<update id="talkModify" parameterType="com.project.vo.TalkVO">
		UPDATE tb_talk t, tb_member m
		SET t.talk_title = #{talk_title},
			t.talk_content = #{talk_content},
			t.talk_date = now(),
			t.talk_photo = #{talk_photo}
		WHERE talk_num = #{talk_num}
		  and t.mb_nick in (
			select mb_nick from tb_member
			where mb_nick = #{mb_nick}
			)
	</update>

	<delete id="talkDelete" parameterType="int">
		DELETE FROM tb_talk
		WHERE talk_num = #{talk_num}
	</delete>

	<!-- 댓글부분(상담) -->
	<select id="talkcommentList" parameterType="int" resultType="CommentVO">
		SELECT *
		FROM tb_comment
		where talk_num=#{talk_num}
		order by comment_group,comment_date
	</select>

	<insert id="talkcommentInsert" parameterType="CommentVO">
		INSERT INTO tb_comment(talk_num,comment_content,mb_nick,mb_seq,mb_doctor,comment_depth,comment_group)
		VALUES(#{talk_num},#{comment_content},#{mb_nick},#{mb_seq},#{mb_doctor},#{comment_depth},#{comment_group})
	</insert>

	<!-- 제일 최근 comment_seq 가져오기-->
	<select id="last2" resultType="int">
		select last_insert_id();
	</select>

	<!-- comment_seq를 group값으로 넣기(모댓글인 경우에만 사용)-->
	<update id="talkupdateGroup" parameterType="int">
		update tb_comment
		set comment_group=#{comment_seq}
		where comment_seq=#{comment_seq}
	</update>

	<update id="talkcommentUpdate" parameterType="CommentVO">
		UPDATE tb_comment
		SET comment_content=#{comment_content},
			comment_date=now()
		WHERE comment_seq=#{comment_seq}
	</update>

	<delete id="talkcommentDelete" parameterType="int">
		DELETE
		FROM tb_comment
		WHERE comment_seq=#{comment_seq}
	</delete>

	<!-- 대댓글 출력을 위한 댓글 카운트-->
	<select id="talkrecommentList" parameterType="int" resultType="CommentVO">
		select * from tb_comment where comment_group=#{comment_group} and comment_depth=1 order by comment_date
	</select>

	<!-- 게시글별 댓글 카운트 관련-->
	<update id="talkupdateReplyCount" parameterType="int">
		update tb_talk b
		set b.talk_comment = (select count(comment_seq) from tb_comment where talk_num = #{talk_num})
		where b.talk_num = #{talk_num}
	</update>

	<!-- 신고 페이지 작성-->
	<select id="reportList" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
		SELECT *
		FROM tb_report
		where report_category = #{category}
		ORDER BY re_num DESC
			LIMIT #{cri.pageStart}, #{cri.perPageNum}
		]]>
	</select>

	<select id="reportListCnt" resultType="int">
		SELECT count(*)
		FROM tb_report
		where report_category = #{category}
	</select>

	<!-- 신고 글 작성 -->
	<insert id="reportWrite">
		INSERT INTO tb_report (re_title, re_content, mb_seq,report_category,re_photo)
		VALUES (#{re_title}, #{re_content}, #{mb_seq}, #{report_category},#{re_photo} )
	</insert>

	<!-- 신고 글 읽기 -->
	<select id="reportRead" resultType="ReportVO">
		SELECT re_num, re_title, report_category,re_content,re_photo,mb_seq,re_date
		FROM tb_report
		WHERE re_num = #{re_num}
	</select>

	<!-- 신고 글 수정 -->
	<update id="reportModify" parameterType="com.project.vo.ReportVO">
		UPDATE tb_report r, tb_member m
		SET r.re_title = #{re_title},
			r.re_content = #{re_content},
			r.re_date = now(),
			r.re_photo = #{re_photo}
		WHERE re_num = #{re_num}
		  and r.mb_seq in (
			select mb_seq from tb_member
			where mb_seq = #{mb_seq}
			)
	</update>

	<!--에디터 리스트-->
	<select id="editorList" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
		SELECT *
		FROM tb_editor
		where edit_category = #{category}
		ORDER BY edit_num DESC
			LIMIT #{cri.pageStart}, #{cri.perPageNum}
		]]>
	</select>

	<select id="editorListCnt" resultType="int">
		SELECT count(*)
		FROM tb_editor
		where edit_category = #{category}
	</select>

	<!-- 에디터 글 작성 -->
	<insert id="editorWrite">
		INSERT INTO tb_editor (edit_title, edit_content, mb_seq, edit_photo, mb_nick)
		VALUES (#{edit_title}, #{edit_content}, #{mb_seq}, #{edit_photo}, #{mb_nick})
	</insert>

	<!-- 에디터 글 읽기 -->
	<select id="editorRead" resultType="EditorVO">
		SELECT edit_num, edit_title, edit_content, edit_photo, mb_seq, edit_date, mb_nick
		FROM tb_editor
		WHERE edit_num = #{edit_num}
	</select>

	<!-- 댓글부분 -->
	<select id="editorcommentList" parameterType="int" resultType="CommentVO">
		SELECT *
		FROM tb_comment
		where edit_num=#{edit_num}
		order by comment_group,comment_date
	</select>

	<insert id="editorcommentInsert" parameterType="CommentVO">
		INSERT INTO tb_comment(edit_num, comment_content, mb_nick, mb_seq, mb_doctor, comment_depth, comment_group)
		VALUES(#{edit_num}, #{comment_content}, #{mb_nick}, #{mb_seq}, #{mb_doctor}, #{comment_depth}, #{comment_group})
	</insert>

	<!-- 제일 최근 comment_seq 가져오기-->
	<select id="last3" resultType="int">
		select last_insert_id();
	</select>

	<!-- comment_seq를 group값으로 넣기(모댓글인 경우에만 사용)-->
	<update id="editorupdateGroup" parameterType="int">
		update tb_comment
		set comment_group=#{comment_seq}
		where comment_seq=#{comment_seq}
	</update>

	<update id="editorcommentUpdate" parameterType="CommentVO">
		UPDATE tb_comment
		SET comment_content=#{comment_content},
			comment_date=now()
		WHERE comment_seq=#{comment_seq}
	</update>

	<delete id="editorcommentDelete" parameterType="int">
		DELETE
		FROM tb_comment
		WHERE comment_seq=#{comment_seq}
	</delete>

	<!-- 대댓글 출력을 위한 댓글 카운트-->
	<select id="editorrecommentList" parameterType="int" resultType="CommentVO">
		select * from tb_comment where comment_group=#{comment_group} and comment_depth=1 order by comment_date
	</select>

	<!-- 게시글별 댓글 카운트 관련-->
	<update id="editorupdateReplyCount" parameterType="int">
		update tb_editor b
		set b.edit_comment = (select count(comment_seq) from tb_comment where edit_num = #{edit_num})
		where b.edit_num = #{edit_num}
	</update>

	<!-- 좋아요 기능 - 에디터 -->
	<select id="editorlikecount" resultType="Integer" parameterType="LikeVO">
		select count(like_check) from tb_like where mb_nick=#{mb_nick} and edit_num=#{edit_num}
	</select>

	<insert id="editorlikeinsert" parameterType="LikeVO">
		insert into tb_like(mb_nick, edit_num)
		values (#{mb_nick}, #{edit_num})
	</insert>

	<select id="editorlikegetinfo" resultType="Integer" parameterType="LikeVO">
		select like_check from tb_like where mb_nick=#{mb_nick} and edit_num=#{edit_num}
	</select>

	<update id="editorlikeupdate" parameterType="LikeVO">
		update tb_like
		set <include refid="cal"></include>
		where mb_nick=#{mb_nick} and edit_num=#{edit_num}
	</update>

	<!-- 에디터 좋아요 수 출력-->
	<update id="editorupdatelike" parameterType="int">
		update tb_editor b
		set b.edit_like = (select count(edit_num) from tb_like where edit_num = #{edit_num} and like_check=1)
		where b.edit_num = #{edit_num}
	</update>




	<!-- 공지사항 리스트-->
	<select id="noticeList" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
		SELECT *
		FROM tb_notice
		where notice_category = #{category}
		ORDER BY notice_num DESC
			LIMIT #{cri.pageStart}, #{cri.perPageNum}
		]]>
	</select>

	<select id="noticeListCnt" resultType="int">
		SELECT count(*)
		FROM tb_notice
		where notice_category = #{category}
	</select>

	<!-- 공지사항 글 작성 -->
	<insert id="noticeWrite">
		INSERT INTO tb_notice (notice_title, notice_content, mb_seq, mb_nick)
		VALUES (#{notice_title}, #{notice_content}, #{mb_seq}, #{mb_nick})
	</insert>

	<!-- 공지사항 글 읽기 -->
	<select id="noticeRead" resultType="NoticeVO">
		SELECT notice_num, notice_title, notice_content, mb_seq, notice_date, mb_nick
		FROM tb_notice
		WHERE notice_num = #{notice_num}
	</select>


	<update id="pointModify" parameterType="com.project.vo.MemberVO" >
		UPDATE tb_member
		SET mb_point = #{mb_point}+100
		WHERE mb_id = #{mb_id}
	</update>

	<select id="insertCalendar" parameterType="com.project.vo.MemberVO" >
		UPDATE tb_member
		SET mb_point = #{mb_point}+10
		WHERE mb_id = #{mb_id}
	</select>

	<!--위치기반 페이지 리스트 출력용-->
	<select id="locationList" resultType="hashmap" parameterType="hashmap">
		<![CDATA[
		SELECT *
		FROM tb_location
		where loc_category = #{category}
		ORDER BY loc_num DESC
			LIMIT #{cri.pageStart}, #{cri.perPageNum}
		]]>
	</select>

	<select id="locationListCnt" resultType="int">
		SELECT count(*)
		FROM tb_location
		where loc_category = #{category}
	</select>

</mapper>